{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithPopup, signInWithRedirect, GoogleAuthProvider, createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBqNT2JoYsGEWYpAQtyB2uofFMLdVsj0pY\",\n  authDomain: \"plush-shop.firebaseapp.com\",\n  projectId: \"plush-shop\",\n  storageBucket: \"plush-shop.appspot.com\",\n  messagingSenderId: \"1721815988\",\n  appId: \"1:1721815988:web:423cea1c6f2b1ddfe418e1\"\n};\nconst firebaseApp = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async (userAuth, additionalInformation = {\n  displayName: \"mike\"\n}) => {\n  if (!userAuth) return;\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log(\"error creating the user\", error.message);\n    }\n  }\n  return userDocRef;\n};\nexport const creatAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithPopup","signInWithRedirect","GoogleAuthProvider","createUserWithEmailAndPassword","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","db","createUserDocumentFromAuth","userAuth","additionalInformation","displayName","userDocRef","uid","userSnapshot","exists","email","createdAt","Date","error","console","log","message","creatAuthUserWithEmailAndPassword","password"],"sources":["/Users/estrellam/Desktop/test/React-Practice/Plush-Shop/src/utils/firebase/firebase.utils.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport {\n  getAuth,\n  signInWithPopup,\n  signInWithRedirect,\n  GoogleAuthProvider,\n  createUserWithEmailAndPassword,\n} from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBqNT2JoYsGEWYpAQtyB2uofFMLdVsj0pY\",\n  authDomain: \"plush-shop.firebaseapp.com\",\n  projectId: \"plush-shop\",\n  storageBucket: \"plush-shop.appspot.com\",\n  messagingSenderId: \"1721815988\",\n  appId: \"1:1721815988:web:423cea1c6f2b1ddfe418e1\",\n};\n\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst provider = new GoogleAuthProvider();\n\nprovider.setCustomParameters({\n  prompt: \"select_account\",\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\n\nexport const db = getFirestore();\n\nexport const createUserDocumentFromAuth = async (\n  userAuth,\n  additionalInformation = { displayName: \"mike\" }\n) => {\n  if (!userAuth) return;\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n\n  const userSnapshot = await getDoc(userDocRef);\n\n  if (!userSnapshot.exists()) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation,\n      });\n    } catch (error) {\n      console.log(\"error creating the user\", error.message);\n    }\n  }\n  return userDocRef;\n};\n\nexport const creatAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SACEC,OAAO,EACPC,eAAe,EACfC,kBAAkB,EAClBC,kBAAkB,EAClBC,8BAA8B,QACzB,eAAe;AACtB,SAASC,YAAY,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;AAEtE,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,4BAA4B;EACxCC,SAAS,EAAE,YAAY;EACvBC,aAAa,EAAE,wBAAwB;EACvCC,iBAAiB,EAAE,YAAY;EAC/BC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,WAAW,GAAGjB,aAAa,CAACU,cAAc,CAAC;AAEjD,MAAMQ,QAAQ,GAAG,IAAId,kBAAkB,CAAC,CAAC;AAEzCc,QAAQ,CAACC,mBAAmB,CAAC;EAC3BC,MAAM,EAAE;AACV,CAAC,CAAC;AAEF,OAAO,MAAMC,IAAI,GAAGpB,OAAO,CAAC,CAAC;AAC7B,OAAO,MAAMqB,qBAAqB,GAAGA,CAAA,KAAMpB,eAAe,CAACmB,IAAI,EAAEH,QAAQ,CAAC;AAE1E,OAAO,MAAMK,EAAE,GAAGjB,YAAY,CAAC,CAAC;AAEhC,OAAO,MAAMkB,0BAA0B,GAAG,MAAAA,CACxCC,QAAQ,EACRC,qBAAqB,GAAG;EAAEC,WAAW,EAAE;AAAO,CAAC,KAC5C;EACH,IAAI,CAACF,QAAQ,EAAE;EACf,MAAMG,UAAU,GAAGrB,GAAG,CAACgB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACI,GAAG,CAAC;EAEjD,MAAMC,YAAY,GAAG,MAAMtB,MAAM,CAACoB,UAAU,CAAC;EAE7C,IAAI,CAACE,YAAY,CAACC,MAAM,CAAC,CAAC,EAAE;IAC1B,MAAM;MAAEJ,WAAW;MAAEK;IAAM,CAAC,GAAGP,QAAQ;IACvC,MAAMQ,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;IAE5B,IAAI;MACF,MAAMzB,MAAM,CAACmB,UAAU,EAAE;QACvBD,WAAW;QACXK,KAAK;QACLC,SAAS;QACT,GAAGP;MACL,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,KAAK,CAACG,OAAO,CAAC;IACvD;EACF;EACA,OAAOV,UAAU;AACnB,CAAC;AAED,OAAO,MAAMW,iCAAiC,GAAG,MAAAA,CAAOP,KAAK,EAAEQ,QAAQ,KAAK;EAC1E,IAAI,CAACR,KAAK,IAAI,CAACQ,QAAQ,EAAE;EAEzB,OAAO,MAAMnC,8BAA8B,CAACgB,IAAI,EAAEW,KAAK,EAAEQ,QAAQ,CAAC;AACpE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}